<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Michael Reneer</title><link href="http://michaelreneer.com/" rel="alternate"></link><link href="http://localhost:8000/feeds/ios.atom.xml" rel="self"></link><id>http://michaelreneer.com/</id><updated>2013-03-02T00:00:00-05:00</updated><entry><title>Objective-C Style Guide</title><link href="http://michaelreneer.com/objective-c-style-guide/" rel="alternate"></link><updated>2013-03-02T00:00:00-05:00</updated><author><name>Michael Kelly Reneer</name></author><id>tag:michaelreneer.com,2013-03-02:objective-c-style-guide/</id><summary type="html">&lt;p&gt;Reading code can be difficult. Maybe you didn't write it; maybe seventeen people
touched it before you. My preference is to conform to whatever style is
currently being used when joining a project. In the absence of that:&lt;/p&gt;
&lt;p&gt;Consistent. Clean. Easy to read. Short.&lt;/p&gt;
&lt;h2&gt;Dot Notation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use dot notation to access properties.&lt;/li&gt;
&lt;li&gt;Use message notation to call a method.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Whitespace&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use spaces not tabs.&lt;/li&gt;
&lt;li&gt;Do not wrap lines.&lt;/li&gt;
&lt;li&gt;Use new lines before blocks of code.&lt;/li&gt;
&lt;li&gt;Do not open braces on a new line.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Structure&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Only define the public interface in the header.&lt;/li&gt;
&lt;li&gt;Only &lt;code&gt;#import&lt;/code&gt; the superclass, adopted protocols, and enums in the header.&lt;/li&gt;
&lt;li&gt;Don't declare methods in the private interface.&lt;/li&gt;
&lt;li&gt;Don't put two semicolons on the same line.&lt;/li&gt;
&lt;li&gt;Use #pragma marks to logically group code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Naming&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use descriptive variable names.&lt;/li&gt;
&lt;li&gt;Use self describing method names.&lt;/li&gt;
&lt;li&gt;Use class name prefixes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use descriptive variable and method names to explain code not comments.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;TODO:&lt;/code&gt; &lt;code&gt;FIXME:&lt;/code&gt; &lt;code&gt;!!!:&lt;/code&gt; and &lt;code&gt;???:&lt;/code&gt; when writing comments.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Variables&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Asterisks of pointers belong with the variable not the type.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;@property&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use properties.&lt;/li&gt;
&lt;li&gt;Do not declare iVars.&lt;/li&gt;
&lt;li&gt;Only access iVars directly during initialization.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Booleans&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;YES&lt;/code&gt; or &lt;code&gt;NO&lt;/code&gt; not &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Do not compare to methods or properties that return &lt;code&gt;BOOL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="ios"></category><category term="style"></category></entry></feed>